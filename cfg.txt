Terminals:
+ - * / % and or variable number is ! not = > < ( ) [ ] ! & ^ ~ True False string ' " if elif else : while for in def # class import as from return raise , break pass continue with None .
Variables:
S ASSIGNMENTOP ASSIGNABLES CONSTANT STRING BOOLEAN OPERATOR COMMENTSTRING COMMENT IF ELIF LOOPBODY WHILE DEF VARIABLECLAUSE DEFBODY FUNCTION CLAUSE IMPORT FROM WITH STRINGCLAUSE RAISE CLASS FOR IFINDEF ELIFINDEF WHILEINDEF FORINDEF LOOPBODYINDEF LIST LISTVARIABLE BRACKETSPAWNER VARIABLE
Productions:
S -> S S | variable ASSIGNMENTOP ASSIGNABLES | ASSIGNABLES | COMMENT | pass | IF | WHILE | DEF | VARIABLECLAUSE | FUNCTION | FROM | IMPORT | RAISE | WITH | CLASS | FOR | LIST | LISTVARIABLE | VARIABLE | e;
ASSIGNMENTOP -> = | + = | - = | * = | / = | % = | / / = | * * = | & = | ^ = | > > = | < < =;
ASSIGNABLES -> variable | CONSTANT | FUNCTION | VARIABLE | ( ASSIGNABLES ) | ASSIGNABLES OPERATOR ASSIGNABLES | VARIABLECLAUSE | not ASSIGNABLES | LIST | LISTVARIABLE;
CONSTANT -> number | STRING | STRINGCLAUSE | BOOLEAN | None;
STRING -> ' string ' | " string " | ' ' | " " | STRING + STRING;
BOOLEAN -> True | False;
OPERATOR -> + | / | - | * | % | * * | / / | = = | ! = | > | < | > = | < = | and | or | is | in | & | ^ | ~ | < < | > >;
COMMENTSTRING -> string | COMMENTSTRING COMMENTSTRING;
COMMENT -> " " " COMMENTSTRING " " " | ' ' ' COMMENTSTRING ' ' ' | # COMMENTSTRING;
IF -> if ASSIGNABLES : | if ASSIGNABLES : S ELIF | if ASSIGNABLES : S ELIF else : | if ASSIGNABLES : S else :;
ELIF -> elif ASSIGNABLES : | elif ASSIGNABLES : S | ELIF ELIF;
LOOPBODY -> LOOPBODY break LOOPBODY | LOOPBODY continue LOOPBODY | S | e;
WHILE -> while ASSIGNABLES : LOOPBODY;
DEF -> def variable ( VARIABLECLAUSE ) : DEFBODY;
VARIABLECLAUSE -> variable | variable , VARIABLECLAUSE;
DEFBODY -> DEFBODY DEFBODY | return | return ASSIGNABLES | IFINDEF | WHILEINDEF | FORINDEF | S | e;
FUNCTION -> variable ( CLAUSE ) | variable ( FUNCTION );
CLAUSE -> VARIABLECLAUSE | ASSIGNABLES | CLAUSE , CLAUSE | ( CLAUSE );
IMPORT -> import variable as variable | import variable;
FROM -> from variable IMPORT | from variable import *;
WITH -> with ASSIGNABLES : | with ASSIGNABLES as variable :;
STRINGCLAUSE -> STRING | STRINGCLAUSE , STRINGCLAUSE;
RAISE -> raise | raise ASSIGNABLES;
CLASS -> class variable : | class FUNCTION :;
FOR -> for variable in ASSIGNABLES : LOOPBODY;
IFINDEF -> IF | if ASSIGNABLES : DEFBODY ELIFINDEF | if ASSIGNABLES : DEFBODY ELIFINDEF else : | if ASSIGNABLES : DEFBODY else :;
ELIFINDEF -> ELIF | elif ASSIGNABLES : DEFBODY | ELIFINDEF ELIFINDEF;
WHILEINDEF -> WHILE | while ASSIGNABLES : LOOPBODYINDEF;
FORINDEF -> FOR | for variable in ASSIGNABLES : LOOPBODYINDEF;
LOOPBODYINDEF -> LOOPBODY | DEFBODY | e;
LIST -> [ CLAUSE ] | [ STRINGCLAUSE ];
LISTVARIABLE -> variable BRACKETSPAWNER;
BRACKETSPAWNER -> [ ASSIGNABLES ] | [ LISTVARIABLE ] | BRACKETSPAWNER BRACKETSPAWNER;
VARIABLE -> variable | LISTVARIABLE | VARIABLE . VARIABLE