Terminals:
def variable number boolean return string operator while assignment pass continue for in break import from as if elif else none not class with raise : , ( ) ' " + [ ] * - = 
Variables:
DEF, PARAMETER, VARIABLECLAUSE, RETURN, CLAUSE, ARITHMETIC, OPERAND, STRING, SUBF, SUBD, BREAK, CONSTANT, LIST, LISTELMT, CONDITION, NOT, WHILE, IMPORT, IF, ELIF, ELSE, FUNCTION, CLASS, ASSIGNMENT, ASSIGNABLES, WITH, RAISE
Productions:
S -> S S | DEF | PARAMETER | VARIABLECLAUSE | CLAUSE | ARITHMETIC | OPERAND | STRING | CONSTANT | LIST | LISTELMT | CONDITION | WHILE | IMPORT | IF | FUNCTION | CLASS | ASSIGNMENT | ASSIGNABLES | WITH | RAISE | e;

SUBF -> S BREAK S SUBF | S pass S SUBF | S continue S SUBF | e;

SUBD -> S RETURN S SUBD | e;

DEF -> def variable PARAMETER : SUBD;
PARAMETER -> ( VARIABLECLAUSE );
VARIABLECLAUSE -> variable | VARIABLECLAUSE , VARIABLECLAUSE;
RETURN -> return | return CLAUSE | e;
CLAUSE -> variable | CONSTANT | CLAUSE , CLAUSE | ( CLAUSE );

ARITHMETIC -> OPERAND operator OPERAND | ARITHMETIC operator ARITHMETIC | OPERAND | ( ARITHMETIC );
OPERAND -> CONSTANT | variable | ( OPERAND );

STRING -> ' string ' | " string " | STRING + STRING | ( STRING );

FOR -> for variable in variable : SUBF | for variable in CLAUSE : SUBF | for variable in LIST : SUBF;
BREAK -> break | e;

LISTELMT -> LIST | CLAUSE | LISTELMT , LISTELMT;
LIST -> [ LISTELMT ];

CONDITION -> variable | CONSTANT | ( CONDITION ) | NOT CONDITION;

WHILE -> while CONDITION : SUBF;

IMPORT -> import variable | from variable import | import variable as variable | from variable import *;

IF ->  if CONDITION : S ELIF ELSE;
ELIF -> elif CONDITION : S | ELIF ELIF;
ELSE -> else : S;

CONSTANT -> number | STRING | ARITMETHIC | boolean | FUNCTION | none | LIST;

FUNCTION -> variable ( CLAUSE );

NOT -> not | e;

CLASS -> class variable : S;

ASSIGNMENT -> variable assignment ASSIGNABLES;

ASSIGNABLES -> variable | CONSTANT | ( ASSIGNABLES );

WITH -> with CLAUSE : S;

RAISE -> raise CONSTANT | raise